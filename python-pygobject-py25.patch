--- pygobject-2.12.1/gobject/pygtype.c.wiget	2006-09-29 16:23:45.000000000 +0200
+++ pygobject-2.12.1/gobject/pygtype.c	2006-09-29 16:24:27.000000000 +0200
@@ -859,7 +859,7 @@
                  G_VALUE_HOLDS(value, G_TYPE_GSTRING)) {
             GString *string;
             char *buffer;
-            int len;
+            Py_ssize_t len;
             if (PyString_AsStringAndSize(obj, &buffer, &len))
                 return -1;
             string = g_string_new_len(buffer, len);
--- pygobject-2.12.1/gobject/gobjectmodule.c.wiget	2006-09-29 16:06:59.000000000 +0200
+++ pygobject-2.12.1/gobject/gobjectmodule.c	2006-09-29 16:09:34.000000000 +0200
@@ -631,7 +631,7 @@
 {
     gboolean ret = TRUE;
     GObjectClass *oclass;
-    int pos = 0;
+    Py_ssize_t pos = 0;
     PyObject *key, *value, *overridden_signals = NULL;
 
     overridden_signals = PyDict_New();
@@ -947,7 +947,7 @@
 {
     gboolean ret = TRUE;
     GObjectClass *oclass;
-    int pos = 0;
+    Py_ssize_t pos = 0;
     PyObject *key, *value;
 
     oclass = g_type_class_ref(instance_type);
@@ -1830,7 +1830,7 @@
     }
 
     if (kwargs) {
-	int pos = 0;
+	Py_ssize_t pos = 0;
 	PyObject *key;
 	PyObject *value;
 
@@ -1886,7 +1886,7 @@
 static gint
 get_handler_priority(gint *priority, PyObject *kwargs)
 {
-    gint len, pos;
+    Py_ssize_t len, pos;
     PyObject *key, *val;
 
     /* no keyword args? leave as default */
--- pygobject-2.12.1/gobject/pygobject.c.wiget	2006-09-29 16:14:09.000000000 +0200
+++ pygobject-2.12.1/gobject/pygobject.c	2006-09-29 16:14:32.000000000 +0200
@@ -1010,7 +1010,7 @@
     }
 
     if (kwargs) {
-	int pos = 0;
+	Py_ssize_t pos = 0;
 	PyObject *key;
 	PyObject *value;
 
--- pygobject-2.12.1/gobject/pygiochannel.c.wiget	2006-09-29 16:16:21.000000000 +0200
+++ pygobject-2.12.1/gobject/pygiochannel.c	2006-09-29 16:19:44.000000000 +0200
@@ -278,7 +278,7 @@
 {
     static char *kwlist[] = { "lines", NULL };
     char *buf;
-    int buf_len;
+    Py_ssize_t buf_len;
     gsize count;
     GError* error = NULL;
     GIOStatus status;
